<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.yedam.java.emp.mapper.EmpMapper"> <!-- mapper를 구성할 때 내용을 담을 곳 -->
<!-- namespace에는 내가 연결하고자 하는 interface의 (경로 포함)이름을 넣는다. -->

	<!-- resultMap은 mybatis 안에서 새로운 타입을 만드는 것임. -->
	<resultMap type="EmpVO" id="empInfo">
			<id column="employee_id" property="employeeId"/>
			<result column="last_name" property="lastName"/>
		<!-- join과 같은 예외사항에 대해서 resultMap이 처리를 해준다. 
			 property와 column을 매칭 시켜준다. -->
	</resultMap>

	<!-- 전체 조회 -->
	<select id="getEmpList" resultType="EmpVO">
	<!-- 매개변수가 없으므로 parameterType이 필요없음. -->
		SELECT * 
		FROM employees
		ORDER BY employee_id
	<!-- Mybatis는 컴파일 해주진 않아서 SQL 문법체크를 해주지 않는다. -->
	</select>
	
	<!-- 단건 조회 -->
	<select id="getEmp" parameterType="EmpVO" resultType="EmpVO">
	<!-- 동작하는데에는 문제없지만 이런 경우 parameterType도 적어준다.
		단, resultType은 필수! // resultType과 resultMap은 동시에 쓸 수 없다. -->
		SELECT *
		FROM employees
		
		<where> 
		<if test="employeeId != 0">
		employee_id = #{employeeId}
		</if>
		<if test="firstName != null and !firstName.equals('')">
		AND first_name = #{firstName}
		<!-- 만약 employee_id는 안적고 firstName만 조회한다면
				mybatis는 알아서 AND를 생략해줍니다 -->
		</if>
		</where>
		<!-- 이렇게 update절 뿐만 아니라 
			select문도 where절에서 다이나믹 SQL이 가능합니다	-->
		
	<!-- 	WHERE employee_id = #{employeeId} // empId -> getEmployeeId -->
	</select>
	
	<!-- 등록 -->
	<insert id="insertEmp" parameterType="EmpVO">
		<selectKey keyProperty="employeeId" resultType="Integer" order="BEFORE"> <!-- BEFORE 또는 AFTER -->
			SELECT MAX(employee_id)+1 FROM employees 
		</selectKey>
	<!-- selectKey에서 처리된 keyProperty에 담긴 값이 values (#{employeeId}) 로 전달된다. -->
				
				INSERT INTO employees
					(employee_id, first_name, last_name, email,phone_number,hire_date,job_id,salary)
					<!-- 이 if문이 감싸고 있는 , 는 생략이 안되므로 마지막 컬럼에는 쓰지마라! -->
					
				VALUES (#{employeeId},#{firstName},#{lastName},#{email},#{phoneNumber},SYSDATE,#{jobId},#{salary})
			<!-- 되도록 mybatis 쓸 때는 insert values 다 적어 주세요. 헷갈리지 않게 -->
			
	</insert>

	<!-- 수정 : 월급 10% 인상 -->
	<update id="updateEmpSalary" parameterType="Integer">
		UPDATE employees
		SET salary = salary * 1.1
		WHERE  employee_id = #{eId}
				<!-- Mapper java 파일에서
				~ updateEmpSalary(@Param("eId")int employeeId);
				Param 덕분에 가능한 표기. -->
	</update>
	
	
	<!-- 수정 : 사원정보를 넘겨받아서 이름과, 성 이메일을 동시에 수정할 수 있는 메소드 -->
	 <!-- 근데 셋 중에 하나 안적으면 NULL이 되어버리는데... 
		 	=> 			DYNAMIC SQL 사용 
		 	내가 동적으로 사용 하고 싶은 부분을 태그로 감싼다				-->
	<update id="updateEmpInfo" parameterType="EmpVO" >
		UPDATE employees
		SET <!-- <SET>태그로 <if>태그들을 감싸도 된다. -->

		<if test="firstName != null and !firstName.equals('')">
		<!-- 이름이 널이 아니고 입력 없음이 아니면 -->
			first_name = #{firstName},
		</if>
		<if test="lastName != null and !lastName.equals('')">
			last_name = #{lastName},
		</if>
		<if test="email != null and !email.equals('')">
			email = #{email}
			<!-- 이 콤마는 mybatis가 알아서 처리해준다. -->
			<!-- 만약 set태그가 없으면 마지막컬럼 if태그의 콤마 처리를 안해준다 -->
		</if>	
	 
		 WHERE employee_id = #{employeeId}
			 
	</update> 
	
	<!-- 직원 삭제 -->
	<delete id="deleteEmpInfo" parameterType="Integer">
	DELETE FROM employees
	WHERE employee_id = #{employeeId}
	</delete>
	
</mapper>